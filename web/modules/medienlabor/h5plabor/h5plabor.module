<?php

use Drupal\Core\Form\FormState;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * add info-text on admin/appearance/settings/barrio_h5plabor
 * @param type $form
 * @param FormState $form_state
 * @param type $form_id
 */
function h5plabor_form_system_theme_settings_alter(&$form, FormState $form_state, $form_id) {
  $notavailable_text = '<em>Value not for &lt;frontpage&gt;. This one is transparent via theme-css</em>';
  $form['color'] ['palette']['bg']['#suffix'] = $notavailable_text;
  $form['color'] ['palette']['footer']['#suffix'] = $notavailable_text;
}



/**
 * unused. NUR FÜR DEN HUB BENÖTIGT
 * @param array $form
 * @param FormStateInterface $form_state
 */
function _h5plabor_form_h5p_validate(array &$form, FormStateInterface $form_state) {

  $big_h5p_error_msg = 'The H5P-element is empty.<br>' . 'You either have to: <ul><li>select a content type to create a new H5P-Element</li><li><b>OR</b> click upload, select your .h5p-file and <em>immediately</em> click "Use"</li></ul>';
  if (!$form_state->getValue("field_h5p")) {
    $form_state->setErrorByName('h5p', t($big_h5p_error_msg));
  }
}

/**
  function h5plabor_entity_bundle_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle) {
  if (isset($fields['field_h5p'])) {
  $fields['field_h5p']->addConstraint('H5PTitleConstraint', []);
  }
  } */


/**
 * Implements hook_ENTITY_TYPE_view() for node entities
 * show a warning for h5p-files that they will be deleted &
 * how to download them.
 * @param array $build
 * @param EntityInterface $node
 * @param EntityViewDisplayInterface $display
 * @param type $view_mode
 */
function h5plabor_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  if (!empty($build['field_h5p'])) {
    $download_text = t("Contents on this platform get deleted regularly. <br>To download your H5P-object, click \"Reuse\" bottom left and \"Download\" afterwards.");
    $download_message = '<div class="alert alert-info" role="alert">' . $download_text . '</div>';
    $build['field_h5p'][0]['#markup'] = $download_message . '' . $build['field_h5p'][0]['#markup'];
  }
}

/**
 * Implements hook_entity_presave().
 */
function h5plabor_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  switch ($entity->bundle()) {

    case 'h5p':
      // Setting the title with the value of h5ptitle.
      $h5p_content = \Drupal::request()->request->get('field_h5p')[0]['h5p_content']['parameters'];
      try {
        $h5p_content_decoded = GuzzleHttp\json_decode($h5p_content);
        $h5ptitle = $h5p_content_decoded->metadata->title;
      }
      catch (Exception $ex) {
        //Alternative: Upload von Files
        if (is_array($_FILES)) {
          $candidates = $_FILES['files']['name'];

          foreach ($candidates as $upload_field_name => $upload_filename) {
            if (strstr($upload_field_name, 'field_h5p')) {
              //ersetze "-" (außer bei \d-) und file-ending durch " "
              $regex = ['/(?<!\d)(-)+/i', '/\.h5p/i'];
              $h5ptitle = ucfirst(trim(preg_replace($regex, ' ', $upload_filename)));
              //dpm($h5ptitle);
              break;
            }
          }
        }
      }
      if (!$h5ptitle) {
        $h5ptitle = '-- unserialization failed --';
      }
      $entity->setTitle($h5ptitle);
      break;
  }
}

/**
 * #use Drupal\Core\Form\FormStateInterface;
 */
function h5plabor_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if(in_array($form_id, array('node_h5p_form','node_h5p_edit_form')))
  {
    _h5plabor_alter_h5p_form($form, $form_state, $form_id);
  }
  
     return;
  # var_dump($form["#id"]);
  if ($form_id == 'views_exposed_form' && in_array($form["#id"], array('views-exposed-form-h5p-list-h5p-block', 'views-exposed-form-webauth-user-switch-page'))) { #var_dump($form["#id"]);
    #var_dump($form);
  }
}

/**
 * similar to hook hook_form_FORM_ID_alter().
 * changes the node-add and node-edit form.
 * 
 * @param $form
 *   Built form array.
 *
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *    Form stat object.
 *
 * @param $form_id
 *    Form ID.
 */
function _h5plabor_alter_h5p_form(&$form, FormState $form_state, $form_id) {  #dpm($form);
  $form['title']['#access'] = FALSE;
  $form['promote']['#access'] = FALSE;
  $form['status']['#access'] = FALSE;
  $form['sticky']['#access'] = FALSE;
  $form['options']['#access'] = FALSE;
  $form['path']['#access'] = FALSE;
  $readable_delete_timestamp = _h5plabor_get_readable_orphan_delete_timediff();
  $delete_notice_text = t('NOTE: H5P-objects will be deleted %stamp after their last usage.', array('%stamp' => $readable_delete_timestamp));

  $form['field_h5p']['widget'][0]['h5p_content']['clear_content'] ['#access'] = FALSE;
  $form['field_h5p']['widget'][0]['h5p_content']['frame'] ['#access'] = FALSE;
  $form['field_h5p']['widget'][0]['h5p_content']['copyright'] ['#access'] = FALSE;
  $form['field_h5p']['#prefix'] = '<div class="alert alert-primary" role="alert">' . $delete_notice_text . '</div>';
  //add validation. die fehlt dem H5P-Modul noch. Nach Hochladen-Klick ohne "Benutzen" klicken, ist der Wert leer & führt zu exceptions
  //NUR FÜR DEN HUB BENÖTIGT $form['#validate'][] = '_h5plabor_form_h5p_validate';
}

/**
 * Statt "My Account" Benutzernamen anzeigen per Klasse PersonalizedPageLink;
 * implements hook_menu_links_discovered_alter
 * @param array $links
 */
function h5plabor_menu_links_discovered_alter(&$links) {
  $links['user.page']['class'] = 'Drupal\h5plabor\Plugin\Menu\PersonalizedPageLink';
}

/**
 * Helperfunktion für Updates. Setzt den embed-typ für InteractiveVideo auf DIV statt IFRAME,
 * weil sonst alle anderen Features (AnnVid, Sprungmarken etc) nicht gehen
 */
function _h5plabor_set_interactiveVideoToDivEmbed() {
  $connection = \Drupal\Core\Database\Database::getConnection();
  $connection->query("update  `h5p_libraries` set `embed_types` = 'div' WHERE `machine_name` LIKE :my_machine_name order by `library_id` desc limit 1", array(':my_machine_name' => 'H5P.InteractiveVideo'));

  \Drupal::messenger()->addMessage("Updated `h5p_libraries` to use 'div' for latest 'H5P.InteractiveVideo'");
}

/**
 * gets a readable representation of the config-value
 * h5plabor.settings.orphans.delete_timeout
 * for example "-180 days" will be "180 days" (with translation)
 * @return string
 */
function _h5plabor_get_readable_orphan_delete_timediff() {
  $delete_timediff = \Drupal::config('h5plabor.settings')->get('orphans.delete_timeout');
  $time_span = trim(str_replace('-', '', preg_replace('/([a-zA-Z])+/', '', $delete_timediff)));
  $time_unit_matches = null;
  preg_match('/([a-zA-Z])+/', $delete_timediff, $time_unit_matches);
  $time_unit = t(trim($time_unit_matches[0]));
  $readable_timediff = $time_span . ' ' . $time_unit;
  return $readable_timediff;
}

/**
 * deletes nodes and users that have not been viewed / edited (nodes) or have loggedin (users
 * within e.g. the last 180 days (depends on h5plabor.settings.orphans.delete_timeout)
 * @throws Exception if settings seem unrealistic
 */
function _h5plabor_delete_orphans() {
  $timediff = \Drupal::config('h5plabor.settings')->get('orphans.delete_timeout');
  $content_valid_until = strtotime($timediff); //ok, passt
  if ($content_valid_until > strtotime("-1 days")) {
    throw new Exception('Drupal::config(\'h5plabor.settings\') seems to be wrong. Please validate.');
  }


  /* //dummy: 30 tage
    $timestamp = time() - 24*60*60*30;
   */
  //dummy: 1 tage
  $content_valid_until = strtotime("-1 days");

  //dpm("valid untiL: ".$content_valid_until);
  $orphaned_content = _h5plabor_get_unusedContentBefore($content_valid_until);
  $orphaned_users = _h5plabor_get_unusedAccounts($content_valid_until);

  $node_delete_counter = 0;
  $user_delete_counter = 0;
  if (count($orphaned_content)) {
    $node_storage_handler = \Drupal::entityTypeManager()->getStorage("node");
    foreach ($orphaned_content as $nid => $details) {
      $node = $node_storage_handler->load($nid);
      if ($node) {
        $node->delete();
        $node_delete_counter++;
      }
    }
  }
  if (count($orphaned_users)) {
    $user_storage_handler = \Drupal::entityTypeManager()->getStorage("user");
    foreach ($orphaned_users as $uid => $details) {
      $user = $user_storage_handler->load($uid);
      if ($user) {
        $user->delete();
        $user_delete_counter++;
      }
    }
  }
  if ($orphaned_content || $orphaned_users) {
    $messenger = \Drupal::messenger();
    $messenger->addMessage(t("Deleted %count_users users and %count_nodes h5p-objects.", array('%count_users' => $user_delete_counter, '%count_nodes' => $node_delete_counter)), $messenger::TYPE_STATUS);
  }
}

/**
 * get content, that has NOT been viewed nor edited AFTER the given Unix-Timestamp $timestamp
 * @param type $timestamp Unix-Timestamp
 * @return array nid => array(nid, title, node_last_access)
 */
function _h5plabor_get_unusedContentBefore($timestamp) {

  $sql = "
  select *  FROM
  (
    select node_table.nid, node_table.title,  GREATEST(COALESCE(node_table.changed,0), COALESCE(history_maxed.latest_access,0)) as node_last_access from (
    #node+node_field_data ergibt bearbeitungszeitpunkt
    select h5p_nodes.nid, h5p_nodes.type, status, uid, title, created, changed from ( select node.nid, node.type from node where node.type = 'h5p') h5p_nodes  join node_field_data on h5p_nodes.nid=node_field_data.nid) node_table LEFT join 
    #+letzter zugriff in history
    (select nid, max(timestamp) as latest_access from history group by nid) history_maxed on node_table.nid = history_maxed.nid 
    ) node_visit_datatable 
     where node_last_access  < :valid_until";

  $database = \Drupal::database();
  $query = $database->query($sql, [
    ':valid_until' => $timestamp,
  ]);
  $result = $query->fetchAllAssoc('nid', PDO::FETCH_ASSOC);

  return $result;
}

/**
 * get accounts, which were last used before $last_use_before_timestamp
 * @param type $last_use_before_timestamp
 * @return array uid=>array(uid, last_access)
 */
function _h5plabor_get_unusedAccounts($last_use_before_timestamp) {
  $sql = "select uid, access as last_access from users_field_data where access < :valid_until AND uid > 1";

  $database = \Drupal::database();
  $query = $database->query($sql, [
    ':valid_until' => $last_use_before_timestamp,
  ]);
  $result = $query->fetchAllAssoc('uid', PDO::FETCH_ASSOC);
  return $result;
}
